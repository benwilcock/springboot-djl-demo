# This component is already included in the 'Polyglot Demo' system here: https://github.com/benwilcock/backstage-catalogs/blob/main/system-polyglot-demo.yml
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: springboot-djl-demo
  description: |

    ## Spring Boot Machine Learning Demo with Deep Java Library (DJL)

    This application serves as a practical demonstration of integrating **modern machine learning capabilities** into the robust and widely-used **Spring Boot framework**, leveraging the power and flexibility of the **Deep Java Library (DJL)**. It showcases how Java developers can build and deploy high-performance, scalable applications that incorporate sophisticated ML models without needing deep expertise in underlying ML frameworks or Python.

    ### Core Technologies

    * **Spring Boot:** At its foundation, the application utilizes Spring Boot to simplify the development of **stand-alone, production-grade Spring-based applications**. It provides features like auto-configuration, embedded web servers (like Tomcat or Netty), and a rich set of starters, enabling developers to quickly set up a web service or a microservice. In this context, Spring Boot provides the **API layer**, handling incoming requests, processing them, and interacting with the machine learning backend.

    * **Deep Java Library (DJL):** DJL acts as the bridge between the Java world and the complex landscape of deep learning frameworks (such as **TensorFlow, PyTorch, and Apache MXNet**). It offers a **high-level, engine-agnostic API**, allowing Java developers to load, run inference on, and even train deep learning models using familiar Java concepts. Key advantages include:
    * **Engine Agnosticism:** Write code once and run it with different ML engines.
    * **Ease of Use:** Abstracts away many complexities of native ML frameworks.
    * **Model Zoo:** Provides access to a wide range of pre-trained models for various tasks.
    * **Performance:** Designed for efficient inference, including support for GPU acceleration.

    ### Application Functionality

    This demonstration application typically exposes a **RESTful API** built with Spring Web. Users can interact with this API to:

    1.  **Submit Data:** Send input text, to the endpoint.
    2.  **Analyse Data:** The Spring Boot controller receives the request and passes the data to a service layer. This service layer then utilizes DJL to analyse the text for sentiment (good or bad) using a pre-trained (or custom-trained) ML model.
    3.  **Return Results:** The predictions are formatted and returned to the user via the API, typically in a standard format like JSON.

    ### Learning and Demonstration Value ðŸ’¡

    This application provides a valuable resource for:

    * **Java Developers:** Learning how to integrate ML into their existing skill set and applications.
    * **Data Scientists:** Understanding how their models can be deployed in a robust, enterprise-grade Java environment.
    * **Architects:** Evaluating a production-ready stack for serving ML models within a microservices architecture.

    It demonstrates a **seamless workflow** from API request to ML prediction and back, highlighting the benefits of combining Spring Boot's rapid development capabilities with DJL's accessible and powerful machine learning features, enabling the creation of intelligent Java applications.

  links:
    - url: https://github.com/benwilcock/springboot-djl-demo
      title: Source Code on GitHub
      icon: github
      type: source
  tags:
    - java
    - spring
    - web
    - tanzu
  annotations:
    'backstage.io/techdocs-ref': dir:.
    'backstage.io/kubernetes-label-selector': 'app.kubernetes.io/part-of=springboot-djl-demo'
    'backstage.io/todo': "true" # required to get the todo component working?
    'github.com/project-slug': 'benwilcock/springboot-djl-demo'
    'jenkins.io/job-full-name': 'benwilcock-org/springboot-sentiment-demo'
    'feedback/type': 'MAIL'
    'feedback/email-to': 'example@example.com'
spec:
  type: component
  lifecycle: experimental
  system: system:default/red-hat-developer-hub
  owner: user:default/benwilcock
  providesApis:
    - sentiments-api
  profile:
    displayName: ML Sentiment Analysis Demo

# APIs
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: sentiments-api
  description: Used to perform sentiment analysis using a REST style API.
  links:
    - url: https://github.com/benwilcock/springboot-djl-demo
      title: Source Code on GitHub
      icon: github
      type: source
  annotations:
    backstage.io/kubernetes-label-selector: "app.kubernetes.io/part-of=springboot-djl-demo"
    # backstage.io/techdocs-ref: url:https://github.com/benwilcock/springboot-djl-demo/blob/main/
spec:
  type: openapi
  lifecycle: production
  owner: user:default/benwilcock
  system: system:default/red-hat-developer-hub
  definition:
    $text: https://github.com/benwilcock/springboot-djl-demo/blob/main/openapi/openapi.json
---